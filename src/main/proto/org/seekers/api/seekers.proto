/*
 * Copyright (C) 2024  Seekers Contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <https://www.gnu.org/licenses/>.
 */

syntax = "proto3";

import "org/seekers/api/vector2d.proto";
import "org/seekers/api/camp.proto";
import "org/seekers/api/goal.proto";
import "org/seekers/api/player.proto";
import "org/seekers/api/seeker.proto";

option optimize_for = SPEED;
option java_multiple_files = true;
option java_package = "org.seekers.api";

// Service for communicating with a seekers game.
service Seekers {
  // Joins the game, returns your token.
  rpc Join (JoinRequest) returns (JoinResponse);

  // Commands any units, returns the current state of the game.
  rpc Command (CommandRequest) returns (CommandResponse);
}

message JoinRequest {
  // Name of your team
  optional string name = 1;

  // Preferred color of your team
  optional string color = 2;
}

message Section {
  // Name of the section
  string name = 1;

  // Entries of the section, delivered in key-value pairs
  map < string, string > entries = 2;
}

message JoinResponse {
  // The token needed for authorizing a command request.
  string token = 1;

  // The ID assigned to a player upon joining.
  string player_id = 2;

  // The sections of the
  repeated Section sections = 3;
}

message Command {
  // ID of the seeker for which the command is intended.
  string seeker_id = 1;

  reserved 2; // Compatibility, fields will be reused in later versions

  // The vector of the new position.
  Vector2D target = 3;

  // The magnet value. Zero to deactivate the magnet, positive to attract
  // goals and negative to repel goals. Should be in the range of [-8:1].
  double magnet = 4;
}

message CommandRequest {
  // Token used for authorization purposes.
  string token = 1;

  // List of commands to be executed.
  repeated Command commands = 2;
}

// Returns all changes since the request call and the number of seekers
// changed by the request.
message CommandResponse {
  // Collection of all players in the game.
  repeated Player players = 1;
  // Collection of all camps in the game.
  repeated Camp camps = 2;
  // Collection of all seekers in the game.
  repeated Seeker seekers = 3;
  // Collection of all goals in the game.
  repeated Goal goals = 4;

  // Number of ticks passed since the game started.
  uint64 passed_playtime = 5;
}
