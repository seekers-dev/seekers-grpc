syntax = "proto3";

import "org/seekers/game/vector2d.proto";
import "org/seekers/game/camp.proto";
import "org/seekers/game/goal.proto";
import "org/seekers/game/player.proto";
import "org/seekers/game/seeker.proto";

option optimize_for = SPEED;
option java_package = "org.seekers.grpc.net";

// Service for communicating with a seekers game.
service Seekers {
  // Joins the game, returns your token.
  rpc Join (JoinRequest) returns (JoinResponse);

  // Gets the properties from the server.
  rpc Properties (Empty) returns (PropertiesResponse);

  // Commands any units, returns the current state of the game.
  rpc Command (CommandRequest) returns (CommandResponse);
}

message JoinRequest {
  // Map of additional details required for joining the game. Currently it takes the two options 'name' and 'color'.
  // The name is a string (e.g. "TeamName") that represents the team name. The color is a hexadecimal web color
  // (e.g "0xAF00AF") that sets the (preferred) color of your team.
  map < string, string > details = 2;
}

message JoinResponse {
  // The token needed for authorizing a command request.
  string token = 1;

  // The ID assigned to a player upon joining.
  string player_id = 2;
}

message PropertiesResponse {
  // The properties entries, contains all property keys mapped to its value.
  map < string, string > entries = 1;
}

message Command {
  // ID of the seeker for which the command is intended.
  string seeker_id = 2;

  // The vector of the new position.
  Vector2D target = 3;

  // The magnet value. Zero to deactivate the magnet, positive to attract goals and negative to repel goals. Should be
  // in the range of [-8:1].
  double magnet = 4;
}

message CommandRequest {
  // Token used for authorization purposes.
  string token = 1;

  // List of commands to be executed.
  repeated Command commands = 2;
}

// Returns all changes since the request call and the number of seekers changed by the request.
message CommandResponse {
  // Collection of all players in the game.
  repeated Player players = 1;
  // Collection of all camps in the game.
  repeated Camp camps = 2;
  // Collection of all seekers in the game.
  repeated Seeker seekers = 3;
  // Collection of all goals in the game.
  repeated Goal goals = 4;

  // Number of ticks passed since the game started.
  uint64 passed_playtime = 5;

  // Numbers of seekers changed by the request.
  uint64 seekers_changed = 6;
}

// An empty message; no future information is needed nor provided.
message Empty {}
